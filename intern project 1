{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "871b78a9",
   "metadata": {},
   "outputs": [],
   "source": [
    "import cv2\n",
    "import mediapipe as mp\n",
    "#import time\n",
    "import math\n",
    "import numpy as np\n",
    "from ctypes import cast, POINTER\n",
    "from comtypes import CLSCTX_ALL\n",
    "from pycaw.pycaw import AudioUtilities, IAudioEndpointVolume\n",
    "cap = cv2.VideoCapture(0)\n",
    "\n",
    "pTime = 0\n",
    "cTime = 0\n",
    "mpHands =  mp.solutions.hands\n",
    "hands = mpHands.Hands()\n",
    "mpDraws = mp.solutions.drawing_utils\n",
    "devices = AudioUtilities.GetSpeakers()\n",
    "interface = devices.Activate(\n",
    "    IAudioEndpointVolume._iid_, CLSCTX_ALL, None)\n",
    "volume = cast(interface, POINTER(IAudioEndpointVolume))\n",
    "\n",
    "volRange = volume.GetVolumeRange()\n",
    "minVol = volRange[0]\n",
    "maxVol = volRange[1]\n",
    "while True:\n",
    "    success , img = cap.read()\n",
    "    imgRGB = cv2.cvtColor(img , cv2.COLOR_BGR2RGB)\n",
    "    results = hands.process(imgRGB)\n",
    "    if results.multi_hand_landmarks:\n",
    "        for handLms in results.multi_hand_landmarks:\n",
    "            lmList =[]\n",
    "            for id , lm in enumerate(handLms.landmark):\n",
    "                \n",
    "                #print(id , lm)\n",
    "                h , w , c = img.shape\n",
    "                cx , cy = int(lm.x*w) ,int(lm.y*h)\n",
    "                #print(id,cx,cy)\n",
    "                lmList.append([id, cx, cy])\n",
    "\n",
    "                \n",
    "                #if id == 1:\n",
    "                #    cv2.circle(img ,(cx,cy) ,20, (255 , 0,125) ,cv2.FILLED )\n",
    "                mpDraws.draw_landmarks(img , handLms , mpHands.HAND_CONNECTIONS)\n",
    "                #print(results.multi_hand_landmarks)\n",
    "\n",
    "            if lmList:    \n",
    "                x1 , y1 = lmList[4][1] , lmList[4][2]\n",
    "                x2 , y2 = lmList[8][1] , lmList[8][2]\n",
    "                cv2.circle(img , (x1 ,y1) ,15 , (255,0,255) ,cv2.FILLED)\n",
    "                cv2.circle(img , (x2 ,y2) ,15 , (255,0,255) ,cv2.FILLED)\n",
    "                \n",
    "                cv2.line(img, (x1,y1) , (x2,y2) , (255 , 0, 255) ,3)\n",
    "\n",
    "                z1 = (x1 + x2)//2\n",
    "                z2 = (y1 + y2)//2\n",
    "\n",
    "                cv2.circle(img , (z1,z2),15 ,(255,0,0) , cv2.FILLED )\n",
    "                length = math.hypot(x2- x1 , y2- y1)\n",
    "                #print(length)\n",
    "\n",
    "                if length < 50:\n",
    "                    cv2.circle(img , (z1 , z2) ,15 ,(255,255,255) , cv2.FILLED)\n",
    "                \n",
    "            vol = np.interp(length , [50 ,300] ,[minVol ,maxVol])\n",
    "            volBar = np.interp(length , [50,300] ,[400 ,150])\n",
    "            volPer = np.interp(length , [50 , 300] , [0,100])\n",
    "            #print(vol)\n",
    "            print(int(length) , vol)\n",
    "            #print(volume.GetVolumeRange())\n",
    "            volume.SetMasterVolumeLevel(vol, None)\n",
    "            \n",
    "            cv2.rectangle(img ,(50,150) , (85,400) ,(0,255,0) , 3)\n",
    "            cv2.rectangle(img ,(50,int(volBar)) , (85,400) ,(0,255,0) , cv2.FILLED)\n",
    "            cv2.putText(img , f'{int(volPer)}%', (40,450) ,cv2.FONT_HERSHEY_PLAIN,3 ,(0,255,255) ,3)\n",
    "            \n",
    "            #if lmList:\n",
    "            #    print(lmList[4][1] , lmList[8])\n",
    "\n",
    "                \n",
    "            \n",
    "            \n",
    "#    cTime = time.time()\n",
    "#    fps = 1/(cTime - pTime)\n",
    "#    pTime = cTime\n",
    "#    cv2.putText(img , str(int(fps)) , (10,70) ,cv2.FONT_HERSHEY_PLAIN , 3, (255,0,255) , 3)\n",
    "\n",
    "    \n",
    "\n",
    "    cv2.imshow(\"Image\" , img)\n",
    "    cv2.waitKey(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5b14e353",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
